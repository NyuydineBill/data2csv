name: Smart Release to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [closed]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install Django
    
    - name: Run tests
      run: |
        python manage.py test tests.test_basic tests.test_export_mixin --verbosity=2

  smart-version:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      version-type: ${{ steps.version.outputs.version-type }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Determine version strategy
      id: version
      run: |
        # Get current version
        CURRENT_VERSION=$(python -c "import re; print(re.search(r\"version='([^']+)'\", open('setup.py').read()).group(1))")
        echo "Current version: $CURRENT_VERSION"
        
        # Check for manual version in commit message
        if [[ "${{ github.event.head_commit.message }}" == *"version:"* ]]; then
          # Extract manual version: "version: 2.0.0"
          NEW_VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o 'version:[[:space:]]*[0-9]\+\.[0-9]\+\.[0-9]\+' | cut -d' ' -f2)
          VERSION_TYPE="manual"
          echo "Manual version specified: $NEW_VERSION"
        else
          # Auto-determine bump type from commit message
          if [[ "${{ github.event.head_commit.message }}" == *"[major]"* ]]; then
            BUMP_TYPE="major"
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
          elif [[ "${{ github.event.head_commit.message }}" == *"[minor]"* ]]; then
            BUMP_TYPE="minor"
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
          elif [[ "${{ github.event.head_commit.message }}" == *"[patch]"* ]]; then
            BUMP_TYPE="patch"
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
          else
            # Default to patch bump
            BUMP_TYPE="patch"
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
          fi
          VERSION_TYPE="auto-$BUMP_TYPE"
          echo "Auto $BUMP_TYPE bump: $CURRENT_VERSION -> $NEW_VERSION"
        fi
        
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version-type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        
        # Update files
        sed -i "s/version='$CURRENT_VERSION'/version='$NEW_VERSION'/" setup.py
        sed -i "s/__version__ = '$CURRENT_VERSION'/__version__ = '$NEW_VERSION'/" admin_export/__init__.py
        
        # Commit and push
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add setup.py admin_export/__init__.py
        git commit -m "Bump version to $NEW_VERSION ($VERSION_TYPE) [skip ci]"
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        git push
        git push --tags

  release:
    needs: [test, smart-version]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.smart-version.outputs.new-version }}
        release_name: Release v${{ needs.smart-version.outputs.new-version }}
        body: |
          # Release v${{ needs.smart-version.outputs.new-version }}
          
          **Version Type:** ${{ needs.smart-version.outputs.version-type }}
          **Build:** #${{ github.run_number }}
          **Commit:** ${{ github.sha }}
          
          ## What's New
          - Automated version management
          - CI/CD pipeline improvements
          - Enhanced export functionality
          
          ## Installation
          ```bash
          pip install django-admin-export-tools==${{ needs.smart-version.outputs.new-version }}
          ```
        draft: false
        prerelease: false 