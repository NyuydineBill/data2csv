name: Release to PyPI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install Django
    
    - name: Run tests
      run: |
        python manage.py test tests.test_basic tests.test_export_mixin --verbosity=2

  version-bump:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      new-version: ${{ steps.bump.outputs.new-version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install bump2version
      run: |
        python -m pip install --upgrade pip
        pip install bump2version
    
    - name: Determine version bump type
      id: bump-type
      run: |
        # Check commit message for version bump type
        if [[ "${{ github.event.head_commit.message }}" == *"[major]"* ]]; then
          echo "bump-type=major" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.head_commit.message }}" == *"[minor]"* ]]; then
          echo "bump-type=minor" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.head_commit.message }}" == *"[patch]"* ]]; then
          echo "bump-type=patch" >> $GITHUB_OUTPUT
        else
          echo "bump-type=patch" >> $GITHUB_OUTPUT
        fi
    
    - name: Bump version
      id: bump
      run: |
        # Get current version
        CURRENT_VERSION=$(python -c "import re; print(re.search(r\"version='([^']+)'\", open('setup.py').read()).group(1))")
        echo "Current version: $CURRENT_VERSION"
        
        # Bump version based on type
        BUMP_TYPE="${{ steps.bump-type.outputs.bump-type }}"
        echo "Bumping $BUMP_TYPE version"
        
        if [[ "$BUMP_TYPE" == "major" ]]; then
          # Major: 1.0.0 -> 2.0.0
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
        elif [[ "$BUMP_TYPE" == "minor" ]]; then
          # Minor: 1.0.0 -> 1.1.0
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
        else
          # Patch: 1.0.0 -> 1.0.1
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1}')
        fi
        
        echo "New version: $NEW_VERSION"
        echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
        # Update setup.py
        sed -i "s/version='$CURRENT_VERSION'/version='$NEW_VERSION'/" setup.py
        
        # Update __init__.py
        sed -i "s/__version__ = '$CURRENT_VERSION'/__version__ = '$NEW_VERSION'/" admin_export/__init__.py
        
        # Commit and push version bump
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add setup.py admin_export/__init__.py
        git commit -m "Bump version to $NEW_VERSION [skip ci]"
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        git push
        git push --tags

  build-and-publish:
    needs: [test, version-bump]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.version-bump.outputs.new-version }}
        release_name: Release v${{ needs.version-bump.outputs.new-version }}
        body: |
          Automated release from main branch
          
          Version: ${{ needs.version-bump.outputs.new-version }}
          Build number: ${{ github.run_number }}
          Commit: ${{ github.sha }}
          
          ## What's New
          - Automated version bump
          - CI/CD pipeline improvements
          - Enhanced export functionality
        draft: false
        prerelease: false 